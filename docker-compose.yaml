# version: '3.8'

services:
  client: # uses Dockerfile in client directory
    build: ./client # build from the client directory
    env_file: ./client/.env
    ports:
      - "${VITE_LOCAL_PORT}:${VITE_DOCKER_PORT}"
    restart: always
    depends_on:
      - server
    volumes:
      - ./client:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=false
  server:
    build: ./server # build from the server directory
    env_file: ./server/.env
    ports:
      - "${NODE_LOCAL_PORT}:${NODE_DOCKER_PORT}"
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./server:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
  db:
    build: ./db # Custom Dockerfile with Node.js
    env_file: ./db/.env
    ports:
      - "${POSTGRES_LOCAL_PORT}:${POSTGRES_DOCKER_PORT}"
    restart: always
    volumes:
      - db:/var/lib/postgresql/data
      - ./db/init-scripts:/docker-entrypoint-initdb.d
      - ./db/data:/db/data # Mount data directory for CSV access
      - ./db/post-init.sh:/post-init.sh # Mount post-init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  db:
